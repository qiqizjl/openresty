diff -uNr -x .git source/src/stream/ngx_stream.h new/src/stream/ngx_stream.h
--- source/src/stream/ngx_stream.h	2018-10-30 01:38:21.000000000 +0800
+++ new/src/stream/ngx_stream.h	2018-10-30 02:45:03.000000000 +0800
@@ -241,6 +241,14 @@
 } ngx_stream_module_t;
 
 
+typedef struct {
+    ngx_msec_t                       connect_timeout;
+    ngx_msec_t                       timeout;
+} ngx_stream_proxy_ctx_t;
+
+#define NGX_STREAM_HAVE_PROXY_TIMEOUT_FIELDS_PATCH 1
+
+
 #define NGX_STREAM_MODULE       0x4d525453     /* "STRM" */
 
 #define NGX_STREAM_MAIN_CONF    0x02000000
@@ -294,6 +302,7 @@
 extern ngx_module_t  ngx_stream_module;
 extern ngx_uint_t    ngx_stream_max_module;
 extern ngx_module_t  ngx_stream_core_module;
+extern ngx_module_t  ngx_stream_proxy_module;
 
 
 typedef ngx_int_t (*ngx_stream_filter_pt)(ngx_stream_session_t *s,
diff -uNr -x .git source/src/stream/ngx_stream_proxy_module.c new/src/stream/ngx_stream_proxy_module.c
--- source/src/stream/ngx_stream_proxy_module.c	2018-10-30 01:38:21.000000000 +0800
+++ new/src/stream/ngx_stream_proxy_module.c	2018-10-30 02:45:34.000000000 +0800
@@ -368,6 +368,7 @@
     ngx_stream_proxy_srv_conf_t      *pscf;
     ngx_stream_upstream_srv_conf_t   *uscf, **uscfp;
     ngx_stream_upstream_main_conf_t  *umcf;
+    ngx_stream_proxy_ctx_t           *pctx;
 
     c = s->connection;
 
@@ -376,6 +377,17 @@
     ngx_log_debug0(NGX_LOG_DEBUG_STREAM, c->log, 0,
                    "proxy connection handler");
 
+    pctx = ngx_palloc(c->pool, sizeof(ngx_stream_proxy_ctx_t));
+    if (pctx == NULL) {
+        ngx_stream_proxy_finalize(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
+        return;
+    }
+
+    pctx->connect_timeout = pscf->connect_timeout;
+    pctx->timeout = pscf->timeout;
+
+    ngx_stream_set_ctx(s, pctx, ngx_stream_proxy_module);
+
     u = ngx_pcalloc(c->pool, sizeof(ngx_stream_upstream_t));
     if (u == NULL) {
         ngx_stream_proxy_finalize(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
@@ -667,6 +679,7 @@
     ngx_connection_t             *c, *pc;
     ngx_stream_upstream_t        *u;
     ngx_stream_proxy_srv_conf_t  *pscf;
+    ngx_stream_proxy_ctx_t       *ctx;
 
     c = s->connection;
 
@@ -674,6 +687,8 @@
 
     pscf = ngx_stream_get_module_srv_conf(s, ngx_stream_proxy_module);
 
+    ctx = ngx_stream_get_module_ctx(s, ngx_stream_proxy_module);
+
     u = s->upstream;
 
     u->connected = 0;
@@ -735,7 +750,7 @@
     pc->read->handler = ngx_stream_proxy_connect_handler;
     pc->write->handler = ngx_stream_proxy_connect_handler;
 
-    ngx_add_timer(pc->write, pscf->connect_timeout);
+    ngx_add_timer(pc->write, ctx->connect_timeout);
 }
 
 
@@ -905,8 +920,10 @@
     ssize_t                       n, size;
     ngx_connection_t             *c, *pc;
     ngx_stream_upstream_t        *u;
-    ngx_stream_proxy_srv_conf_t  *pscf;
     u_char                        buf[NGX_PROXY_PROTOCOL_MAX_HEADER];
+    ngx_stream_proxy_ctx_t       *ctx;
+
+    ctx = ngx_stream_get_module_ctx(s, ngx_stream_proxy_module);
 
     c = s->connection;
 
@@ -933,9 +950,7 @@
             return NGX_ERROR;
         }
 
-        pscf = ngx_stream_get_module_srv_conf(s, ngx_stream_proxy_module);
-
-        ngx_add_timer(pc->write, pscf->timeout);
+        ngx_add_timer(pc->write, ctx->timeout);
 
         pc->write->handler = ngx_stream_proxy_connect_handler;
 
@@ -999,6 +1014,9 @@
     ngx_connection_t             *pc;
     ngx_stream_upstream_t        *u;
     ngx_stream_proxy_srv_conf_t  *pscf;
+    ngx_stream_proxy_ctx_t       *ctx;
+
+    ctx = ngx_stream_get_module_ctx(s, ngx_stream_proxy_module);
 
     u = s->upstream;
 
@@ -1036,7 +1054,7 @@
     if (rc == NGX_AGAIN) {
 
         if (!pc->write->timer_set) {
-            ngx_add_timer(pc->write, pscf->connect_timeout);
+            ngx_add_timer(pc->write, ctx->connect_timeout);
         }
 
         pc->ssl->handler = ngx_stream_proxy_ssl_handshake;
@@ -1301,11 +1319,14 @@
     ngx_stream_session_t         *s;
     ngx_stream_upstream_t        *u;
     ngx_stream_proxy_srv_conf_t  *pscf;
+    ngx_stream_proxy_ctx_t       *ctx;
 
     c = ev->data;
     s = c->data;
     u = s->upstream;
 
+    ctx = ngx_stream_get_module_ctx(s, ngx_stream_proxy_module);
+
     if (c->close) {
         ngx_log_error(NGX_LOG_INFO, c->log, 0, "shutdown timeout");
         ngx_stream_proxy_finalize(s, NGX_STREAM_OK);
@@ -1331,7 +1352,7 @@
                 }
 
                 if (u->connected && !c->read->delayed && !pc->read->delayed) {
-                    ngx_add_timer(c->write, pscf->timeout);
+                    ngx_add_timer(c->write, ctx->timeout);
                 }
 
                 return;
@@ -1490,6 +1511,9 @@
     ngx_log_handler_pt            handler;
     ngx_stream_upstream_t        *u;
     ngx_stream_proxy_srv_conf_t  *pscf;
+    ngx_stream_proxy_ctx_t       *ctx;
+
+    ctx = ngx_stream_get_module_ctx(s, ngx_stream_proxy_module);
 
     u = s->upstream;
 
@@ -1701,7 +1725,7 @@
         }
 
         if (!c->read->delayed && !pc->read->delayed) {
-            ngx_add_timer(c->write, pscf->timeout);
+            ngx_add_timer(c->write, ctx->timeout);
 
         } else if (c->write->timer_set) {
             ngx_del_timer(c->write);
